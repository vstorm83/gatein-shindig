Title: Apache Shindig SVN Conventions
Notice:    Licensed to the Apache Software Foundation (ASF) under one
           or more contributor license agreements.  See the NOTICE file
           distributed with this work for additional information
           regarding copyright ownership.  The ASF licenses this file
           to you under the Apache License, Version 2.0 (the
           "License"); you may not use this file except in compliance
           with the License.  You may obtain a copy of the License at
           .
             http://www.apache.org/licenses/LICENSE-2.0
           .
           Unless required by applicable law or agreed to in writing,
           software distributed under the License is distributed on an
           "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
           KIND, either express or implied.  See the License for the
           specific language governing permissions and limitations
           under the License.

# Apache Shindig SVN Conventions

This document describes how developers should use SVN, our SCM.

## Subversion Configuration

Before committing files in subversion repository, you need to read the 
[Committer Subversion Access](http://www.apache.org/dev/version-control.html#https-svn) document 
and you must set your svn client with this properties file: svn-props

## Commit Message Template

Based on [ASF committer's FAQ](http://www.apache.org/dev/committers.html#applying-patches), 
the commits should have a message that follows this template:

<pre>
[issue1, issue2] <<comment>>
Submitted by: (when it was a patch, put that persons name there)

o some comments
</pre>

Where:

*  <b>issue</b> can be omitted if there was no relevant JIRA issue, though it is strongly 
encouraged to create one for significant changes.
*  <b>Submitted by</b> only needs to be specified when a patch is being applied for a non-committer.
*  <b>comments</b> some words about the commits.

## Apply User Patch

By default, the committer should apply the patch without any <b>major</b> modifications. 
In a second step, the committer could apply any changes as usual.

## Edit Commit Message

If you want to edit a commit message, you could call:

<pre>svn pe svn:log --revprop -r XXX</pre>

where <b>XXX</b> is the wanted version

## Other useful Subversion commands while developing

If you've done a chunk of work and you would like ditch your changes and start from 
scratch use this command to revert to the original checkout:

<pre>$ svn revert -R</pre>

The -R argument means that the command will recurse down all directories and revert all changes.

Before committing code to the Subversion repository we always set the svn:ignore property on the 
directory to prevent some files and directories to be checked in. We always exclude the IDE 
project files and the target/ directory. Instead of keeping all of the excludes in mind all 
the time it's useful to put them all in a file and reference the file with the -F option:

<pre>$ svn propset svn:ignore -F ~/bin/svnignore</pre>

An example svnignore file:

<pre>
target
*~
*.log
.classpath
.project
*.ipr
*.iws
*.iml
</pre>